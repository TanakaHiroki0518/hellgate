#include	<stdio.h>
#include	<stdlib.h>
#include	<DxLib.h>
#include	"frameWork/hellsgate.h"

USE_NS_FW

MAP_MAIN	lpspr_map[map_num];
int map[map_h][map_w];
int map2[map_h][map_w];
int map3[map_h][map_w];
int map4[map_h][map_w];
void	MapDraw(int map[map_h][map_w],int map2[map_h][map_w],int map3[map_h][map_w],int map4[map_h][map_w]);
int map_x[map_h][map_w];
int map_y[map_h][map_w];
int map_xinit;
int map_yinit;
int dmg_c;
long i;
long e;



//=============================================================================
//		マップデータの読み込み
//		制作年/月/日		制作者
//		  2013/01/08		H.tanaka
//=============================================================================
//2/1/3/4 3F(map_c=21/22/23/24)
//2/1/3/4 2F(map_c=11/12/13/14)
//2/1/3/4 1F(map_c=1 /2 /3 /4 )
void	MapDataLoad(int map[map_h][map_w],int map2[map_h][map_w],int map3[map_h][map_w],int map4[map_h][map_w],int map_c)
{
	if((map_c / 10) == 0)
	{
		int	Maptip[map_h][map_w]=
		{
			{ 14,18,18,18,18,18,18,18,18,18,18,18	,	 18,18,18,18,18,18,18,18,18,18,18,12},
			{ 16,26,23,23,23,23,23,23,23,23,23,23	,	 23,23,23,23,23,23,23,23,23,23,23,15},
			{ 16,26,23,23,23,23,23,23,23,23,23,23	,	 23,23,23,23,23,23,23,23,23,23,23,15},
			{ 16,4 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,15},
			{ 16,3 ,7 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,6 ,2 ,15},
			{ 16,3 ,7 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,6 ,2 ,22},
			{ 16,3 ,7 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,23},
			{ 16,3 ,7 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,23},
			{ 16,4 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 },

			{ 16,4 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 },
			{ 16,3 ,7 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,20},
			{ 16,3 ,7 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,6 ,2 ,15},
			{ 16,3 ,7 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,6 ,2 ,15},
			{ 16,3 ,7 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,6 ,2 ,15},
			{ 13,17,17,17,17,17,17,17,17,17,17,17	,	 17,17,17,17,17,17,17,17,17,17,17,11},
			{ 70,70,70,70,70,70,70,70,70,70,70,70	,	 70,70,70,70,70,70,70,70,70,70,70,70},
			{ 70,70,70,70,70,70,70,70,70,70,70,70	,	 70,70,70,70,70,70,70,70,70,70,70,70},
			{ 70,70,70,70,70,70,70,70,70,70,70,70	,	 70,70,70,70,70,70,70,70,70,70,70,70},
			
		};

		int	Maptip2[map_h][map_w]=
		{
			{ 14,18,18,18,18,18,18,18,18,37,18,24	,	 24,18,37,18,18,18,18,18,18,18,18,12},
			{ 16,26,23,23,23,23,23,23,23,29,26,25	,	 25,23,29,26,23,23,23,23,23,23,23,15},
			{ 16,26,23,23,23,23,23,23,23,29,26,25	,	 25,23,29,26,23,23,23,23,23,23,23,15},
			{ 16,4 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,36,4 ,0	,	 0 ,0 ,36,4 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,15},
			{ 16,4 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,23,4 ,0	,	 0 ,0 ,23,4 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,15},
			{ 16,4 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,23,4 ,0	,	 0 ,0 ,23,4 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,22},
			{ 16,4 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,23},
			{ 16,4 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,23},
			{ 16,4 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 },

			{ 16,4 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 },
			{ 16,4 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,20},
			{ 16,4 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,15},
			{ 16,4 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,15},
			{ 16,4 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,15},
			{ 16,4 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,15},
			{ 16,4 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,15},
			{ 16,4 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,15},
			{ 13,17,17,17,17,17,17,17,17,17,28,1	,	 5 ,27,17,17,17,17,17,17,17,17,17,11},
		};

		int	Maptip3[map_h][map_w]=
		{
			{ 14,18,18,18,18,18,18,18,18,18,18,18	,	 18,18,18,18,18,18,18,18,18,18,18,12},
			{ 16,26,23,23,23,23,23,23,23,23,23,23	,	 23,23,23,23,23,23,23,23,23,23,23,15},
			{ 16,26,23,23,23,23,23,23,23,23,23,23	,	 23,23,23,23,23,23,23,23,23,23,23,15},
			{ 16,4 ,32,32,32,32,32,32,32,32,32,32	,	 32,32,32,32,32,32,32,32,32,32,32,15},
			{ 16,4 ,34,34,34,34,34,34,34,34,34,34	,	 34,34,34,34,34,34,34,34,34,34,34,15},
			{ 21,4 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,22},
			{ 23,4 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,23},
			{ 23,4 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,23},
			{ 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 },

			{ 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 },
			{ 19,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,20},
			{ 16,4 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,15},
			{ 16,4 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,15},
			{ 16,4 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,15},
			{ 16,4 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,15},
			{ 16,4 ,35,35,35,35,35,35,35,35,35,35	,	 35,35,35,35,35,35,35,35,35,35,35,15},
			{ 16,4 ,33,33,33,33,33,33,33,33,33,33	,	 33,33,33,33,33,33,33,33,33,33,33,15},
			{ 13,17,17,17,17,17,17,17,17,17,17,17	,	 17,17,17,17,17,17,17,17,17,17,17,11},
		};

		int Maptip4[map_h][map_w]=
		{
			{ 14,18,18,18,18,18,18,18,18,18,18,18	,	 18,18,18,18,18,18,18,18,18,18,18,12},
			{ 16,26,23,23,23,23,23,23,23,23,23,23	,	 23,23,23,23,23,23,23,23,23,23,23,15},
			{ 16,26,23,23,23,23,23,23,23,23,23,23	,	 23,23,23,23,23,23,23,23,23,23,23,15},
			{ 16,4 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,15},
			{ 16,4 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,15},
			{ 21,4 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,15},
			{ 23,4 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,15},
			{ 23,4 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,15},
			{ 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,15},

			{ 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,30,3 ,7 ,0 ,0 ,6 ,2 ,15},
			{ 19,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,29,3 ,7 ,0 ,0 ,6 ,2 ,15},
			{ 16,4 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,29,3 ,7 ,0 ,0 ,6 ,2 ,15},
			{ 16,4 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,29,3 ,7 ,0 ,0 ,6 ,2 ,15},
			{ 16,4 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,29,3 ,7 ,0 ,0 ,6 ,2 ,15},
			{ 16,4 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,29,3 ,7 ,0 ,0 ,6 ,2 ,15},
			{ 16,4 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,29,3 ,7 ,0 ,0 ,6 ,2 ,15},
			{ 16,4 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,29,3 ,7 ,0 ,0 ,6 ,2 ,15},
			{ 13,17,17,17,17,17,17,17,17,17,17,17	,	 17,17,17,17,31,17,17,17,17,17,17,11},
		};
		//コピー
		for(int i=0; i<map_h; i++)
		{
			for(int e=0; e<map_w; e++)
			{
				map[i][e]	=Maptip[i][e];
				map2[i][e]	=Maptip2[i][e];
				map3[i][e]	=Maptip3[i][e];
				map4[i][e]	=Maptip4[i][e];
			}
		}
	}
	else if((map_c / 10) == 1)
	{
		int	Maptip[map_h][map_w]=
		{
			{ 14,18,18,18,18,18,18,18,18,18,18,18	,	 18,18,18,18,18,18,18,18,18,18,18,12},
			{ 16,26,23,23,23,23,23,23,23,23,23,23	,	 23,23,23,23,23,23,23,23,23,23,23,15},
			{ 16,26,23,23,23,23,23,23,23,23,23,23	,	 23,23,23,23,23,23,23,23,23,23,23,15},
			{ 16,4 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,15},
			{ 16,4 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,15},
			{ 16,4 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,22},
			{ 16,4 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,23},
			{ 16,4 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,23},
			{ 16,4 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 },

			{ 16,4 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 },
			{ 16,4 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,20},
			{ 16,4 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,15},
			{ 16,4 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,15},
			{ 16,4 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,15},
			{ 16,4 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,15},
			{ 16,4 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,15},
			{ 16,4 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,15},
			{ 70,70,70,70,70,70,70,70,70,70,70,70	,	 70,70,70,70,70,70,70,70,70,70,70,70},
			
		};

		int	Maptip2[map_h][map_w]=
		{
			{ 14,18,18,18,18,18,18,18,18,37,18,24	,	 24,18,37,18,18,18,18,18,18,18,18,12},
			{ 16,26,23,23,23,23,23,23,23,29,26,25	,	 25,23,29,26,23,23,23,23,23,23,23,15},
			{ 16,26,23,23,23,23,23,23,23,29,26,25	,	 25,23,29,26,23,23,23,23,23,23,23,15},
			{ 16,4 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,36,4 ,0	,	 0 ,0 ,36,4 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,15},
			{ 16,4 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,23,4 ,0	,	 0 ,0 ,23,4 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,15},
			{ 16,4 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,23,4 ,0	,	 0 ,0 ,23,4 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,22},
			{ 16,4 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,23},
			{ 16,4 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,23},
			{ 16,4 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 },

			{ 16,4 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 },
			{ 16,4 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,20},
			{ 16,4 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,15},
			{ 16,4 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,15},
			{ 16,4 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,15},
			{ 16,4 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,15},
			{ 16,4 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,15},
			{ 16,4 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,15},
			{ 13,17,17,17,17,17,17,17,17,17,28,24	,	 24,27,17,17,17,17,17,17,17,17,17,11},
		};

		int	Maptip3[map_h][map_w]=
		{
			{ 14,18,18,18,18,37,18,18,18,18,18,18	,	 18,18,18,18,37,18,18,18,18,18,18,12},
			{ 16,26,23,23,23,29,23,23,23,23,23,23	,	 23,23,23,23,29,23,23,23,23,23,23,15},
			{ 16,26,23,23,23,29,23,23,23,23,23,23	,	 23,23,23,23,36,23,23,23,23,23,23,15},
			{ 16,4 ,0 ,0 ,0 ,29,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,23,0 ,0 ,0 ,0 ,0 ,0 ,15},
			{ 16,4 ,0 ,0 ,0 ,29,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,23,0 ,0 ,0 ,0 ,0 ,0 ,15},
			{ 21,4 ,0 ,0 ,0 ,29,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,22},
			{ 23,4 ,0 ,0 ,0 ,29,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,23},
			{ 23,4 ,0 ,0 ,0 ,29,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,30,0 ,0 ,0 ,0 ,0 ,0 ,23},
			{ 0 ,0 ,0 ,0 ,0 ,36,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,29,0 ,0 ,0 ,0 ,0 ,0 ,0 },

			{ 0 ,0 ,0 ,0 ,0 ,23,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,29,0 ,0 ,0 ,0 ,0 ,0 ,0 },
			{ 19,0 ,0 ,0 ,0 ,23,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,29,0 ,0 ,0 ,0 ,0 ,0 ,20},
			{ 16,4 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,29,0 ,0 ,0 ,0 ,0 ,0 ,15},
			{ 16,4 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,29,0 ,0 ,0 ,0 ,0 ,0 ,15},
			{ 16,4 ,0 ,0 ,0 ,30,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,29,0 ,0 ,0 ,0 ,0 ,0 ,15},
			{ 16,4 ,0 ,0 ,0 ,29,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,29,0 ,0 ,0 ,0 ,0 ,0 ,15},
			{ 16,4 ,0 ,0 ,0 ,29,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,29,0 ,0 ,0 ,0 ,0 ,0 ,15},
			{ 16,4 ,0 ,0 ,0 ,29,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,29,0 ,0 ,0 ,0 ,0 ,0 ,15},
			{ 13,17,17,17,17,31,17,17,17,17,17,17	,	 17,17,17,17,31,17,17,17,17,17,17,11},
		};

		int Maptip4[map_h][map_w]=
		{
			{ 14,18,18,18,18,18,18,18,18,18,18,18	,	 18,18,18,18,18,37,18,18,18,18,18,12},
			{ 16,26,23,23,23,23,23,23,23,23,23,23	,	 23,23,23,23,23,29,23,23,23,23,23,15},
			{ 16,26,23,23,23,23,23,23,23,23,23,23	,	 23,23,23,23,23,29,23,23,23,23,23,15},
			{ 16,4 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,0 ,29,0 ,0 ,0 ,0 ,0 ,15},
			{ 16,4 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,0 ,29,0 ,0 ,0 ,0 ,0 ,15},
			{ 21,4 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,0 ,29,0 ,0 ,0 ,0 ,0 ,15},
			{ 23,4 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,0 ,29,0 ,0 ,0 ,0 ,0 ,15},
			{ 23,4 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,0 ,29,0 ,0 ,0 ,0 ,0 ,15},
			{ 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,0 ,36,0 ,0 ,0 ,0 ,0 ,15},

			{ 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,0 ,23,0 ,0 ,0 ,0 ,0 ,15},
			{ 19,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,0 ,23,0 ,0 ,0 ,0 ,0 ,15},
			{ 16,4 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,15},
			{ 16,4 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,15},
			{ 16,4 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,15},
			{ 16,4 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,15},
			{ 16,4 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,15},
			{ 16,4 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0	,	 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,15},
			{ 13,17,17,17,17,17,17,17,17,17,17,17	,	 17,17,17,17,17,17,17,17,17,17,17,11},
		};
		//コピー
		for(int i=0; i<map_h; i++)
		{
			for(int e=0; e<map_w; e++)
			{
				map[i][e]	=Maptip[i][e];
				map2[i][e]	=Maptip2[i][e];
				map3[i][e]	=Maptip3[i][e];
				map4[i][e]	=Maptip4[i][e];
			}
		}
	}
	
}

//=============================================================================
//		マップ画像の読み込み
//		制作年/月/日		制作者
//		  2013/01/08		H.tanaka
//=============================================================================
void	MapGraphLoad()
{
	lpspr_map[0].png	=	LoadGraph("graphic/0.PNG");	//床（木材）
	lpspr_map[1].png	=	LoadGraph("graphic/1.PNG");	//床（絨毯）
	lpspr_map[2].png	=	LoadGraph("graphic/2.PNG");	//トゲ（左向き）
	lpspr_map[3].png	=	LoadGraph("graphic/3.PNG");	//トゲ（右向き）
	lpspr_map[4].png	=	LoadGraph("graphic/4.PNG");	//床（木材・暗い）
	lpspr_map[5].png	=	LoadGraph("graphic/5.PNG");	//床（絨毯）
	lpspr_map[6].png	=	LoadGraph("graphic/6.PNG");	//床（左向きトゲ用）
	lpspr_map[7].png	=	LoadGraph("graphic/7.PNG");	//床（右向きトゲ用）
	lpspr_map[11].png	=	LoadGraph("graphic/11.PNG");	//壁（右下）
	lpspr_map[12].png	=	LoadGraph("graphic/12.PNG");	//壁（右上）
	lpspr_map[13].png	=	LoadGraph("graphic/13.PNG");	//壁（左下）
	lpspr_map[14].png	=	LoadGraph("graphic/14.PNG");	//壁（左上）
	lpspr_map[15].png	=	LoadGraph("graphic/15.PNG");	//壁（右）
	lpspr_map[16].png	=	LoadGraph("graphic/16.PNG");	//壁（左）
	lpspr_map[17].png	=	LoadGraph("graphic/17.PNG");	//壁（下）
	lpspr_map[18].png	=	LoadGraph("graphic/18.PNG");	//壁（上）
	lpspr_map[19].png	=	LoadGraph("graphic/19.PNG");	//壁（  ￣| ）
	lpspr_map[20].png	=	LoadGraph("graphic/20.PNG");	//壁（ |￣ ）
	lpspr_map[21].png	=	LoadGraph("graphic/21.PNG");	//壁（  ＿| ）
	lpspr_map[22].png	=	LoadGraph("graphic/22.PNG");	//壁（ |＿ ）
	lpspr_map[23].png	=	LoadGraph("graphic/23.PNG");
	lpspr_map[24].png	=	LoadGraph("graphic/24.PNG");
	lpspr_map[25].png	=	LoadGraph("graphic/25.PNG");
	lpspr_map[26].png	=	LoadGraph("graphic/26.PNG");
	lpspr_map[27].png	=	LoadGraph("graphic/27.PNG");
	lpspr_map[28].png	=	LoadGraph("graphic/28.PNG");
	lpspr_map[29].png	=	LoadGraph("graphic/29.PNG");
	lpspr_map[30].png	=	LoadGraph("graphic/30.PNG");
	lpspr_map[31].png	=	LoadGraph("graphic/31.PNG");
	lpspr_map[32].png	=	LoadGraph("graphic/32.PNG");
	lpspr_map[33].png	=	LoadGraph("graphic/33.PNG");
	lpspr_map[34].png	=	LoadGraph("graphic/34.PNG");
	lpspr_map[35].png	=	LoadGraph("graphic/35.PNG");
	lpspr_map[36].png	=	LoadGraph("graphic/36.PNG");
	lpspr_map[37].png	=	LoadGraph("graphic/37.PNG");
}

void	MapInit()
{
	for(int i=0; i<map_h; i++)
	{
		for(int e=0; e<map_w; e++)
		{
			//map_c = 2からのスタートなのでずらす
			map_x[i][e] = (((e*maptip_size)+16) - WINDOW_SIZE_W);	//マップの初期位置
			map_y[i][e] = ((i*maptip_size)+12);
		}
	}
	map_xinit = map_x[0][0];
	map_yinit = map_y[0][0];
}

void	Mapscroll(int map_c,int scroll,ADV_MAIN *lpspr)
{
	//右
	if(scroll == 3)
	{
		if((map_c - (map_c / 10 * 10)) == 2)
		{
			if(map_x[0][0] > map_xinit)
			{
				for(i = 0;i < map_h;i++)
				{
					for(e = 0;e < map_w;e++)
					{
						map_x[i][e] -= map_speed;
					}
				}
			}
			else
			{
				map_x[0][0] = map_xinit;
				scroll = 0;
			}
		}
		else if((map_c - (map_c / 10 * 10)) == 3)
		{
			if(map_x[0][0] > map_xinit - WINDOW_SIZE_W)
			{
				for(i = 0;i < map_h;i++)
				{
					for(e = 0;e < map_w;e++)
					{
						map_x[i][e] -= map_speed;
					}
				}
			}
			else
			{
				map_x[0][0] = map_xinit - WINDOW_SIZE_W;
				scroll = 0;
			}
			
		}
		else if((map_c - (map_c / 10 * 10)) == 4)
		{
			if(map_x[0][0] > map_xinit - (WINDOW_SIZE_W * 2))
			{
				for(i = 0;i < map_h;i++)
				{
					for(e = 0;e < map_w;e++)
					{
						map_x[i][e] -= map_speed;
					}
				}
			}
			else
			{
				map_x[0][0] = map_xinit - (WINDOW_SIZE_W * 2);
				scroll = 0;
			}
		}
	}
	//左
	else if(scroll == 4)
	{
		if((map_c - (map_c / 10 * 10)) == 1)
		{
			if(map_x[0][0] < map_xinit + WINDOW_SIZE_W)
			{
				for(i = 0;i < map_h;i++)
				{
					for(e = 0;e < map_w;e++)
					{
						map_x[i][e] += map_speed;
					}
				}
			}
			else
			{
				map_x[0][0] = map_xinit + WINDOW_SIZE_W;
				SprShow(lpspr,GRA_ON);
				scroll = 0;
			}
		}
		else if((map_c - (map_c / 10 * 10)) == 2)
		{
			if(map_x[0][0] < map_xinit)
			{
				for(i = 0;i < map_h;i++)
				{
					for(e = 0;e < map_w;e++)
					{
						map_x[i][e] += map_speed;
					}
				}
			}
			else
			{
				map_x[0][0] = map_xinit;
				scroll = 0;
			}
		}
		else if((map_c - (map_c / 10 * 10)) == 3)
		{
			if(map_x[0][0] < map_xinit - WINDOW_SIZE_W)
			{
				for(i = 0;i < map_h;i++)
				{
					for(e = 0;e < map_w;e++)
					{
						map_x[i][e] += map_speed;
					}
				}
			}
			else
			{
				map_x[0][0] = map_xinit - WINDOW_SIZE_W;
				scroll = 0;
			}	
		}
	}
}
void	MapMain(int map_c,int scroll,ADV_MAIN *lpspr)
{
	MapDataLoad(map,map2,map3,map4,map_c);
	Mapscroll(map_c,scroll,lpspr);
	MapDraw(map,map2,map3,map4);
}

void	MapDraw(int map[map_h][map_w],int map2[map_h][map_w],int map3[map_h][map_w],int map4[map_h][map_w])
{
	for(i = 0;i < map_h;i++)
	{
		for(e = 0;e < map_w;e++)
		{
			//map[map_h][map_w]
			fw::Draw(map_x[i][e], map_y[i][e], lpspr_map[map[i][e]].png, TRUE);
			//map2[map_h][map_w]
			fw::Draw((map_x[i][e] + WINDOW_SIZE_W), map_y[i][e], lpspr_map[map2[i][e]].png, TRUE);
			//map3[map_h][map_w]
			fw::Draw((map_x[i][e] + (WINDOW_SIZE_W * 2)), map_y[i][e], lpspr_map[map3[i][e]].png, TRUE);
			//map4[map_h][map_w]
			fw::Draw((map_x[i][e] + (WINDOW_SIZE_W * 3)), map_y[i][e], lpspr_map[map4[i][e]].png, TRUE);
		}
	}
}

void	atari_wall(ADV_MAIN	*lpspr,CHARA_MAIN player,int map_c)
{
	int x;
	int xa;
	int y;
	int ya;
	x = ((lpspr->x - 16) / maptip_size);
	xa = x + 1;
	y = ((lpspr->y - 12) / maptip_size);
	ya = y + 1;
	for(int i=0; i<map_h; i++)
	{
		for(int e=0; e<map_w; e++)
		{
			if((map_c - (map_c / 10 * 10)) == 1)
			{
				if((map[i][e]	>=	11)	&&	(map[i][e]	<=	23))
				{
					if((i == y)	&&	(e == x))
					{
						lpspr->x	=	player.x;
						lpspr->y	=	player.y;
					}
					else if((i == y)	&&	(e == xa))
					{
						lpspr->x	=	player.x;
						lpspr->y	=	player.y;
					}
					else if((i == ya)	&&	(e == x))
					{
						lpspr->x	=	player.x;
						lpspr->y	=	player.y;
					}
					else if((i == ya)	&&	(e == xa))
					{
						lpspr->x	=	player.x;
						lpspr->y	=	player.y;
					}
				}
			}
			else if((map_c - (map_c / 10 * 10))  == 2)
			{
				if(((map2[i][e]	>=	11)	&&	(map2[i][e]	<=	23)) || ((map2[i][e] >= 26) && (map2[i][e] <= 31)) || (map2[i][e] == 36) || (map2[i][e] == 37))
				{
					if((i == y)	&&	(e == x))
					{
						lpspr->x	=	player.x;
						lpspr->y	=	player.y;
					}
					else if((i == y)	&&	(e == xa))
					{
						lpspr->x	=	player.x;
						lpspr->y	=	player.y;
					}
					else if((i == ya)	&&	(e == x))
					{
						lpspr->x	=	player.x;
						lpspr->y	=	player.y;
					}
					else if((i == ya)	&&	(e == xa))
					{
						lpspr->x	=	player.x;
						lpspr->y	=	player.y;
					}
				}
			}
			else if((map_c - (map_c / 10 * 10))  == 3)
			{
				if(((map3[i][e]	>=	11)	&&	(map3[i][e]	<=	23)) || ((map3[i][e] >= 26) && (map3[i][e] <= 31)) || (map3[i][e] == 36) || (map3[i][e] == 37))
				{
					if((i == y)	&&	(e == x))
					{
						lpspr->x	=	player.x;
						lpspr->y	=	player.y;
					}
					else if((i == y)	&&	(e == xa))
					{
						lpspr->x	=	player.x;
						lpspr->y	=	player.y;
					}
					else if((i == ya)	&&	(e == x))
					{
						lpspr->x	=	player.x;
						lpspr->y	=	player.y;
					}
					else if((i == ya)	&&	(e == xa))
					{
						lpspr->x	=	player.x;
						lpspr->y	=	player.y;
					}
				}
			}
			else if((map_c - (map_c / 10 * 10))  == 4)
			{
				if(((map4[i][e]	>=	11)	&&	(map4[i][e]	<=	23)) || ((map4[i][e] >= 26) && (map4[i][e] <= 31)) || (map4[i][e] == 36) || (map4[i][e] == 37))
				{
					if((i == y)	&&	(e == x))
					{
						lpspr->x	=	player.x;
						lpspr->y	=	player.y;
					}
					else if((i == y)	&&	(e == xa))
					{
						lpspr->x	=	player.x;
						lpspr->y	=	player.y;
					}
					else if((i == ya)	&&	(e == x))
					{
						lpspr->x	=	player.x;
						lpspr->y	=	player.y;
					}
					else if((i == ya)	&&	(e == xa))
					{
						lpspr->x	=	player.x;
						lpspr->y	=	player.y;
					}
				}
			}
		}
	}
}

int atari_damage(ADV_MAIN *lpspr, int map_c)
{
	int x;
	int xa;
	int y;
	int ya;
	x = ((lpspr->x - 16) / maptip_size);
	xa = x + 1;
	y = ((lpspr->y - 12) / maptip_size);
	ya = y + 1;
	for(int i=0; i<map_h; i++)
	{
		for(int e=0; e<map_w; e++)
		{
			if((map_c - (map_c /10 *10)) == 1)
			{
				if((map[i][e]	>=	2)	&&	(map[i][e]	<=	3))
				{
					if(((i == y)	&&	(e == x))	||	((i == y)	&&	(e == xa))
						||	((i == ya)	&&	(e == x))	||	((i == ya)	&&	(e == xa)))
					{
						return 1;
					}
				}
			}
			else if((map_c - (map_c /10 *10)) == 2)
			{
				if((map2[i][e]	>=	2)	&&	(map2[i][e]	<=	3))
				{
					if(((i == y)	&&	(e == x))	||	((i == y)	&&	(e == xa))
						||	((i == ya)	&&	(e == x))	||	((i == ya)	&&	(e == xa)))
					{
						return 1;
					}
				}
			}
			else if((map_c - (map_c /10 *10)) == 3)
			{
				if(((map3[i][e]	>=	2)	&&	(map3[i][e]	<=	3)) || ((map3[i][e] >= 32) && (map3[i][e] <= 33)))
				{
					if(((i == y)	&&	(e == x))	||	((i == y)	&&	(e == xa))
						||	((i == ya)	&&	(e == x))	||	((i == ya)	&&	(e == xa)))
					{
						return 1;
					}
				}
			}
			else if((map_c - (map_c /10 *10)) == 4)
			{
				if((map4[i][e]	>=	2)	&&	(map4[i][e]	<=	3))
				{
					if(((i == y)	&&	(e == x))	||	((i == y)	&&	(e == xa))
						||	((i == ya)	&&	(e == x))	||	((i == ya)	&&	(e == xa)))
					{
						return 1;
					}
				}
			}
		}
	}
	return 0;
}

int	damage_trap(ADV_MAIN	*lpspr,CHARA_MAIN player,int map_c)
{
	int x;
	int xa;
	int y;
	int ya;
	int dmg;
	dmg = 0;
	x = ((lpspr->x - 16) / maptip_size);
	xa = x + 1;
	y = ((lpspr->y - 12) / maptip_size);
	ya = y + 1;
	dmg_c = player.hp;
	for(int i=0; i<map_h; i++)
	{
		for(int e=0; e<map_w; e++)
		{
			
			if((map_c - (map_c /10 *10)) == 1)
			{
				if(((map[i][e] == 2)	||	(map[i][e] == 3)))
				{
					if(((i == y)	&&	(e == x))	||	((i == y)	&&	(e == xa))
						||	((i == ya)	&&	(e == x))	||	((i == ya)	&&	(e == xa)))
					{
						if(lpspr->dmg	!=	1)
						{
							player.hp	-=	15;
							lpspr->dmg	=	1;
						}
						dmg++;
					}
				}
			}
			else if((map_c - (map_c /10 *10)) == 2)
			{
				if(((map2[i][e] == 2)	||	(map2[i][e] == 3)))
				{
					if(((i == y)	&&	(e == x))	||	((i == y)	&&	(e == xa))
						||	((i == ya)	&&	(e == x))	||	((i == ya)	&&	(e == xa)))
					{
						if(lpspr->dmg	!=	1)
						{
							player.hp	-=	15;
							lpspr->dmg	=	1;
						}
						dmg++;
					}
				}
			}
			else if((map_c - (map_c /10 *10)) == 3)
			{
				if(((map3[i][e] == 2)	||	(map3[i][e] == 3)) || ((map3[i][e] >= 32) && (map3[i][e] <= 33)))
				{
					if(((i == y)	&&	(e == x))	||	((i == y)	&&	(e == xa))
						||	((i == ya)	&&	(e == x))	||	((i == ya)	&&	(e == xa)))
					{
						if(lpspr->dmg	!=	1)
						{
							player.hp	-=	15;
							lpspr->dmg	=	1;
						}
						dmg++;
					}
				}
			}
			else if((map_c - (map_c /10 *10)) == 4)
			{
				if(((map4[i][e] == 2)	||	(map4[i][e] == 3)))
				{
					
					if(((i == y)	&&	(e == x))	||	((i == y)	&&	(e == xa))
						||	((i == ya)	&&	(e == x))	||	((i == ya)	&&	(e == xa)))
					{
						if(lpspr->dmg	!=	1)
						{
							player.hp	-=	15;
							lpspr->dmg	=	1;
						}
						dmg++;
					}
				}
			}
		}
	}
	if(player.hp > 3)
	{
		if(lpspr->dmg == 1)
		{
			LoadDivGraph("graphic/player_dmg.PNG",lpspr->allnum,lpspr->x_num,lpspr->y_num,lpspr->w,lpspr->h,lpspr->sprNo);
		}
		if((dmg_c == player.hp) && (dmg == 0) && (lpspr->dmg != 0))
		{
			lpspr->dmg = 0;
			LoadDivGraph("graphic/player.PNG",lpspr->allnum,lpspr->x_num,lpspr->y_num,lpspr->w,lpspr->h,lpspr->sprNo);
		}
	}
	dmg_c = 0;
	return player.hp;
}


int	damage_trap_enemy(ADV_MAIN	*lpspr,CHARA_MAIN enemy,int map_c)
{
	int x;
	int xa;
	int y;
	int ya;
	int dmg;
	dmg = 0;
	x = ((lpspr->x - 16) / maptip_size);
	xa = x + 1;
	y = ((lpspr->y - 12) / maptip_size);
	ya = y + 1;
	dmg_c = enemy.hp;
	for(int i=0; i<map_h; i++)
	{
		for(int e=0; e<map_w; e++)
		{
			
			if((map_c - (map_c /10 *10)) == 1)
			{
				if(((map[i][e] == 2)	||	(map[i][e] == 3)))
				{
					if(((i == y)	&&	(e == x))	||	((i == y)	&&	(e == xa))
						||	((i == ya)	&&	(e == x))	||	((i == ya)	&&	(e == xa)))
					{
						if(lpspr->dmg	!=	1)
						{
							enemy.hp	-=	15;
							lpspr->dmg	=	1;
						}
						dmg++;
					}
				}
			}
			else if((map_c - (map_c /10 *10)) == 2)
			{
				if(((map2[i][e] == 2)	||	(map2[i][e] == 3)))
				{
					if(((i == y)	&&	(e == x))	||	((i == y)	&&	(e == xa))
						||	((i == ya)	&&	(e == x))	||	((i == ya)	&&	(e == xa)))
					{
						if(lpspr->dmg	!=	1)
						{
							enemy.hp	-=	15;
							lpspr->dmg	=	1;
						}
						dmg++;
					}
				}
			}
			else if((map_c - (map_c /10 *10)) == 3)
			{
				if(((map3[i][e] == 2)	||	(map3[i][e] == 3)))
				{
					if(((i == y)	&&	(e == x))	||	((i == y)	&&	(e == xa))
						||	((i == ya)	&&	(e == x))	||	((i == ya)	&&	(e == xa)))
					{
						if(lpspr->dmg	!=	1)
						{
							enemy.hp	-=	15;
							lpspr->dmg	=	1;
						}
						dmg++;
					}
				}
			}
			else if((map_c - (map_c /10 *10)) == 4)
			{
				if(((map4[i][e] == 2)	||	(map4[i][e] == 3)))
				{
					
					if(((i == y)	&&	(e == x))	||	((i == y)	&&	(e == xa))
						||	((i == ya)	&&	(e == x))	||	((i == ya)	&&	(e == xa)))
					{
						if(lpspr->dmg	!=	1)
						{
							enemy.hp	-=	15;
							lpspr->dmg	=	1;
						}
						dmg++;
					}
				}
			}
		}
	}
	
	dmg_c = 0;
	return enemy.hp;
}
int key_main(ADV_MAIN *lpspr,int map_c)
{
	if(map_c == 4)
	{
		if((lpspr->x >= 640) && (lpspr->x + lpspr->w <= 700))
		{
			if((lpspr->y >= 500) && (lpspr->y + lpspr->h <= 560))
			{
				return 106;
			}
		}
	}
	if(map_c == 14)
	{
		if((lpspr->x >= 610) && (lpspr->x + lpspr->w <= 670))
		{
			if((lpspr->y >= 120) && (lpspr->y + lpspr->h <= 200))
			{
				return 107;
			}
		}
	}
	return 0;
}